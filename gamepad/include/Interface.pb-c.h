/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Interface.proto */

#ifndef PROTOBUF_C_Interface_2eproto__INCLUDED
#define PROTOBUF_C_Interface_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Axis Axis;
typedef struct _Button Button;
typedef struct _GamePad GamePad;


/* --- enums --- */

typedef enum _MessageType {
  MESSAGE_TYPE__MSG_AXIS = 1,
  MESSAGE_TYPE__MSG_BUTTON = 2,
  MESSAGE_TYPE__MSG_GAMEPAD = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE)
} MessageType;

/* --- messages --- */

struct  _Axis
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msgtype;
  MessageType msgtype;
  /*
   * / Range -128 to +127
   */
  int32_t x;
  /*
   * / Range -128 to +127
   */
  int32_t y;
};
#define AXIS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&axis__descriptor) \
    , 0,MESSAGE_TYPE__MSG_AXIS, 0, 0 }


struct  _Button
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msgtype;
  MessageType msgtype;
  /*
   * / 1 when pressed, otherwise 0
   */
  protobuf_c_boolean state;
};
#define BUTTON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&button__descriptor) \
    , 0,MESSAGE_TYPE__MSG_BUTTON, 0 }


struct  _GamePad
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msgtype;
  MessageType msgtype;
  /*
   * / 
   */
  Axis *stick1;
  /*
   * / 
   */
  Axis *stick2;
  /*
   * / 
   */
  Button *triangle;
  /*
   * / 
   */
  Button *o;
  /*
   * / 
   */
  Button *x;
  /*
   * / 
   */
  Button *square;
};
#define GAME_PAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game_pad__descriptor) \
    , 0,MESSAGE_TYPE__MSG_GAMEPAD, NULL, NULL, NULL, NULL, NULL, NULL }


/* Axis methods */
void   axis__init
                     (Axis         *message);
size_t axis__get_packed_size
                     (const Axis   *message);
size_t axis__pack
                     (const Axis   *message,
                      uint8_t             *out);
size_t axis__pack_to_buffer
                     (const Axis   *message,
                      ProtobufCBuffer     *buffer);
Axis *
       axis__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   axis__free_unpacked
                     (Axis *message,
                      ProtobufCAllocator *allocator);
/* Button methods */
void   button__init
                     (Button         *message);
size_t button__get_packed_size
                     (const Button   *message);
size_t button__pack
                     (const Button   *message,
                      uint8_t             *out);
size_t button__pack_to_buffer
                     (const Button   *message,
                      ProtobufCBuffer     *buffer);
Button *
       button__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   button__free_unpacked
                     (Button *message,
                      ProtobufCAllocator *allocator);
/* GamePad methods */
void   game_pad__init
                     (GamePad         *message);
size_t game_pad__get_packed_size
                     (const GamePad   *message);
size_t game_pad__pack
                     (const GamePad   *message,
                      uint8_t             *out);
size_t game_pad__pack_to_buffer
                     (const GamePad   *message,
                      ProtobufCBuffer     *buffer);
GamePad *
       game_pad__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game_pad__free_unpacked
                     (GamePad *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Axis_Closure)
                 (const Axis *message,
                  void *closure_data);
typedef void (*Button_Closure)
                 (const Button *message,
                  void *closure_data);
typedef void (*GamePad_Closure)
                 (const GamePad *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCMessageDescriptor axis__descriptor;
extern const ProtobufCMessageDescriptor button__descriptor;
extern const ProtobufCMessageDescriptor game_pad__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Interface_2eproto__INCLUDED */
